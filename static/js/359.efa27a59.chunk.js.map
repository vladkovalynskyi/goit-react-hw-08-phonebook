{"version":3,"file":"static/js/359.efa27a59.chunk.js","mappings":"0OACA,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAwF,yBAAxF,EAAyH,yBAAzH,EAA8J,6B,8BCQxJA,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGNC,EAASC,EAAAA,GAAW,CACxBH,MAAOG,EAAAA,KAEJC,QACC,kCACA,2DAEDC,SANI,qBAOPJ,SAAUE,EAAAA,KAEPC,QACC,qBACA,uFAMDC,SAVO,0BAaCC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAmBXC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAQjC,OANAC,EAAAA,EAAAA,YAAU,WACJH,GACFF,EAAS,YAAa,CAAEM,SAAS,GAEpC,GAAE,CAACN,EAAUE,KAGZ,SAAC,KAAD,CACEZ,cAAeA,EACfiB,iBAAkBd,EAClBe,SA7BiB,SAACC,EAAQC,GAC5B,IAAQC,EAAcD,EAAdC,UACFpB,EAAQkB,EAAOlB,MACfC,EAAWiB,EAAOjB,SAUxBM,GAASc,EAAAA,EAAAA,IAAU,CAAErB,MAAAA,EAAOC,SAAAA,KAC5BmB,GACD,EAWC,UAKE,UAAC,KAAD,CAAME,UAAWC,EAAjB,WACE,mBAAOD,UAAWC,EAAlB,mBAEE,SAAC,KAAD,CAAOD,UAAWC,EAAWC,KAAK,QAAQC,KAAK,QAAQpB,UAAQ,KAC/D,SAAC,KAAD,CAAcoB,KAAK,QAAQC,UAAU,IAAIJ,UAAWC,QAEtD,mBAAOD,UAAWC,EAAlB,sBAEE,SAAC,KAAD,CACED,UAAWC,EACXC,KAAK,WACLC,KAAK,WACLpB,UAAQ,KAEV,SAAC,KAAD,CAAcoB,KAAK,WAAWC,UAAU,IAAIJ,UAAWC,QAEzD,mBAAQD,UAAWC,EAAeC,KAAK,SAAS,aAAW,SAA3D,wBAMP,ECtFD,EAJkB,WAChB,OAAO,SAAClB,EAAD,GACR,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"error\":\"LoginForm_error__012y+\",\"submitBtn\":\"LoginForm_submitBtn__O3h3k\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { loginUser } from 'redux/auth/operations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport css from './LoginForm.module.css';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport { useEffect } from 'react';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst schema = yup.object({\n  email: yup\n    .string()\n    .matches(\n      /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n      'Please enter a valid email. For example Adrian@mail.com'\n    )\n    .required(`Email is required`),\n  password: yup\n    .string()\n    .matches(\n      /^[a-zA-Z-0-9]{8,}$/,\n      'Password should be 8 chars minimum and can contain latin letters and numeric digits'\n    )\n    // .matches(\n    //   /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/,\n    //   'Password should be 8 chars minimum and contain 1 upper case letter, 1 lower case letter and 1 numeric digit'\n    // )\n    .required(`Password is required`),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (values, actions) => {\n    const { resetForm } = actions;\n    const email = values.email;\n    const password = values.password;\n\n    // const isRegistered = isUserAlreadyRegistered(name);\n\n    // if (isAdded !== -1) {\n    //   alert(`${name} is already in contacts`);\n    //   resetForm();\n    //   return;\n    // }\n\n    dispatch(loginUser({ email, password }));\n    resetForm();\n  };\n\n  const userLoggedIn = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    if (userLoggedIn) {\n      navigate('/contacts', { replace: true });\n    }\n  }, [navigate, userLoggedIn]);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={css.form}>\n        <label className={css.label}>\n          Email\n          <Field className={css.input} type=\"email\" name=\"email\" required />\n          <ErrorMessage name=\"email\" component=\"p\" className={css.error} />\n        </label>\n        <label className={css.label}>\n          Password\n          <Field\n            className={css.input}\n            type=\"password\"\n            name=\"password\"\n            required\n          />\n          <ErrorMessage name=\"password\" component=\"p\" className={css.error} />\n        </label>\n        <button className={css.submitBtn} type=\"submit\" aria-label=\"log in\">\n          Log in\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n"],"names":["initialValues","email","password","schema","yup","matches","required","LoginForm","dispatch","useDispatch","navigate","useNavigate","userLoggedIn","useSelector","selectIsLoggedIn","useEffect","replace","validationSchema","onSubmit","values","actions","resetForm","loginUser","className","css","type","name","component"],"sourceRoot":""}