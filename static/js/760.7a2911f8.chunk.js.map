{"version":3,"file":"static/js/760.7a2911f8.chunk.js","mappings":"gOACA,EAAuB,yBAAvB,EAAwD,0BAAxD,EAA0F,0BAA1F,EAA4H,0BAA5H,EAAkK,8B,UCK5JA,EAAgB,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGNC,EAASC,EAAAA,GAAW,CACxBJ,KAAMI,EAAAA,KAEHC,QACC,2CACA,gJAEDC,SANG,oBAONL,MAAOG,EAAAA,KAEJC,QACC,kCACA,2DAEDC,SANI,qBAOPJ,SAAUE,EAAAA,KAEPC,QACC,qBACA,uFAMDC,SAVO,0BAaCC,EAAa,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MAajB,OACE,SAAC,KAAD,CACEV,cAAeA,EACfW,iBAAkBP,EAClBQ,SAfiB,SAACC,EAAQC,GAC5B,IAAQC,EAAcD,EAAdC,UACFd,EAAOY,EAAOZ,KACdC,EAAQW,EAAOX,MACfC,EAAWU,EAAOV,SACxBa,QAAQC,IAAI,CAAEhB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,IAE3BM,GAASS,EAAAA,EAAAA,IAAW,CAAEjB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,KACnCY,GACD,EAGC,UAKE,UAAC,KAAD,CAAMI,UAAWC,EAAjB,WACE,mBAAOD,UAAWC,EAAlB,kBAEE,SAAC,KAAD,CAAOD,UAAWC,EAAWC,KAAK,OAAOpB,KAAK,OAAOM,UAAQ,KAC7D,SAAC,KAAD,CAAcN,KAAK,OAAOqB,UAAU,IAAIH,UAAWC,QAErD,mBAAOD,UAAWC,EAAlB,mBAEE,SAAC,KAAD,CAAOD,UAAWC,EAAWC,KAAK,QAAQpB,KAAK,QAAQM,UAAQ,KAC/D,SAAC,KAAD,CAAcN,KAAK,QAAQqB,UAAU,IAAIH,UAAWC,QAEtD,mBAAOD,UAAWC,EAAlB,sBAEE,SAAC,KAAD,CACED,UAAWC,EACXC,KAAK,WACLpB,KAAK,WACLM,UAAQ,KAEV,SAAC,KAAD,CAAcN,KAAK,WAAWqB,UAAU,IAAIH,UAAWC,QAEzD,mBAAQD,UAAWC,EAAeC,KAAK,SAAS,aAAW,UAA3D,yBAMP,ECjFD,EAJmB,WACjB,OAAO,SAACb,EAAD,GACR,C","sources":["webpack://react-homework-template/./src/components/SignUpForm/SignUpForm.module.css?655f","components/SignUpForm/SignUpForm.jsx","pages/SignUpPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SignUpForm_form__OYKon\",\"label\":\"SignUpForm_label__TcM9x\",\"input\":\"SignUpForm_input__2jKXC\",\"error\":\"SignUpForm_error__BQm0T\",\"submitBtn\":\"SignUpForm_submitBtn__cAg7p\"};","import { useDispatch } from 'react-redux';\nimport { signupUser } from 'redux/auth/operations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport css from './SignUpForm.module.css';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst schema = yup.object({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Z]+(([' -][a-zA-Z ])?[a-zA-Z]*)*$/,\n      \"Name may contain only latin letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(`Name is required`),\n  email: yup\n    .string()\n    .matches(\n      /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n      'Please enter a valid email. For example Adrian@mail.com'\n    )\n    .required(`Email is required`),\n  password: yup\n    .string()\n    .matches(\n      /^[a-zA-Z-0-9]{8,}$/,\n      'Password should be 8 chars minimum and can contain latin letters and numeric digits'\n    )\n    // .matches(\n    //   /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/,\n    //   'Password should be 8 chars minimum and contain 1 upper case letter, 1 lower case letter and 1 numeric digit'\n    // )\n    .required(`Password is required`),\n});\n\nexport const SignUpForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const { resetForm } = actions;\n    const name = values.name;\n    const email = values.email;\n    const password = values.password;\n    console.log({ name, email, password });\n\n    dispatch(signupUser({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={css.form}>\n        <label className={css.label}>\n          Name\n          <Field className={css.input} type=\"text\" name=\"name\" required />\n          <ErrorMessage name=\"name\" component=\"p\" className={css.error} />\n        </label>\n        <label className={css.label}>\n          Email\n          <Field className={css.input} type=\"email\" name=\"email\" required />\n          <ErrorMessage name=\"email\" component=\"p\" className={css.error} />\n        </label>\n        <label className={css.label}>\n          Password\n          <Field\n            className={css.input}\n            type=\"password\"\n            name=\"password\"\n            required\n          />\n          <ErrorMessage name=\"password\" component=\"p\" className={css.error} />\n        </label>\n        <button className={css.submitBtn} type=\"submit\" aria-label=\"Sign up\">\n          Sign up\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { SignUpForm } from 'components/SignUpForm';\n\nconst SignUpPage = () => {\n  return <SignUpForm />;\n};\n\nexport default SignUpPage;\n"],"names":["initialValues","name","email","password","schema","yup","matches","required","SignUpForm","dispatch","useDispatch","validationSchema","onSubmit","values","actions","resetForm","console","log","signupUser","className","css","type","component"],"sourceRoot":""}